<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FDTD on Beto</title>
    <link>http://localhost:1313/tags/fdtd/</link>
    <description>Recent content in FDTD on Beto</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/fdtd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wave simulations</title>
      <link>http://localhost:1313/posts/waves/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/waves/</guid>
      <description>&lt;p&gt;Wave simulations are essential in optics and electrodynamics. Here are some of the simulations I&amp;rsquo;ve done for wave propagation using finite-difference schemes.&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;video preload=&#34;auto&#34; width=&#34;500px&#34;  autoplay loop playsinline class=&#34;html-video&#34;&gt;&#xA;    &lt;source src=&#34;http://localhost:1313/posts/waves/tesseract.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;  &lt;span&gt;&lt;/span&gt;&#xA;&lt;/video&gt;&#xA;&lt;/center&gt;&#xA;&lt;h2 id=&#34;discrete-wave-equation&#34;&gt;Discrete wave equation&lt;/h2&gt;&#xA;&lt;p&gt;In general, using a FDTD scheme is just a fancy way of discretizing a differential operator. In this case, we want to discretize the following equation,&lt;/p&gt;&#xA;\[\partial^2_{t}\psi(\mathbf{r},t)-\alpha^2{\Delta}\psi(\mathbf{r},t)=0\quad (+\phi),\]&lt;p&gt;with \(\Delta\) being Laplace&amp;rsquo;s operator. One can also add a source term, \(\phi\), but this does not cause any major differences when discretizing the homogeneous equation. &lt;a href=&#34;https://en.wikipedia.org/wiki/Discrete_Laplace_operator&#34;&gt;Wikipedia&amp;rsquo;s page on the Discrete Laplace Operator&lt;/a&gt; gives a great insight into how the method works for \(\mathcal{O}(h^2)\) error. Long story short, we deal with a generalization of the central finite difference method for higher dimensions. In 1D, one has the coefficients \((1,-2,1)\), which discretize \(\partial_x^2\). In 2D, the same coefficients apply, but now in the perpendicular direction. In a cartesian grid, this translates to having a column vector of coefficients \((1,2,1)^T\). For 3D, the same methodology applies. Having the connection between the differential operator and its discrete version \(\Delta_{x,y,z}\rightarrow \mathbf{D}_{i,j,k}^2\), one can infer the structure of the &lt;em&gt;kernel&lt;/em&gt; to be used,&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
